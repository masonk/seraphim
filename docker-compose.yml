version: "2.3"

services:
  play:
    # stdin_open: true
    # tty: true
    command: lldb-server platform --server --listen "0.0.0.0:5000" --gdbserver-port 5001
    user: "${WHO}"
    privileged: true
    build: 
      args:
        # run the container as the current user so that permissions will work across the 
        # bindmount and so that the container doesn't have escalated privs.
        HOST_UID: "${HOST_UID}"
        HOST_GID: "${HOST_GID}"
        WHO: "${WHO}"
      context: "."
      dockerfile: "play/nogpu.dockerfile"
    ports:
      - "5000:5000"
      - "5001:5001"
    volumes:
      - '.:/seraphim'
      - 'rust:/rust' # rust toolchain & build cache
      - 'bash:/bash' # bash history
      - 'data:/data' # model and game data
    environment:
      - SERAPHIM_DATA=/data # seraphim binaries read from and write to files in $SERAPHIM_DATA
      - HISTFILE=/bash/play_history
      - SERAPHIM_MODEL_NAME=${SERAPHIM_MODEL_NAME}
      - CARGO_HOME=/rust/cargo
      - CARGO_TARGET_DIR=/rust/target
      - RUST_BACKTRACE=1
      - RUST_LOG=seraphim,generate_games,hist,interactive,tfrecord_viewer
    working_dir: /seraphim
  train:
    stdin_open: true
    tty: true
    command: /bin/bash
    runtime: nvidia
    user: "${WHO}"
    # NOTE: The SHMEM allocation limit is set to the default of 64MB.  This may be
    # insufficient for TensorFlow.  NVIDIA recommends the use of the following flags:
    # nvidia-docker run --shm-size=1g --ulimit memlock=-1 --ulimit stack=67108864 ...
    build:
      args:
        # run the container as the current user so that permissions will work across the 
        # bindmount and so that the container doesn't have escalated privs.
        HOST_UID: "${HOST_UID}"
        HOST_GID: "${HOST_GID}"
        WHO: "${WHO}"
      context: "."
      dockerfile: "train/Dockerfile"
    ports:
      - "127.0.0.1:5006:5006"
    volumes:
      - '.:/seraphim'
      - 'bash:/bash' # bash history
      - 'data:/data' # model and game data
    environment:
      - SERAPHIM_DATA=/data # seraphim binaries read from and write to files in $SERAPHIM_DATA
      - SERAPHIM_MODEL_NAME=${SERAPHIM_MODEL_NAME}
      - HISTFILE=/bash/train_history
      - NVIDIA_VISIBLE_DEVICES=all
    working_dir: /seraphim
volumes:
  rust:
  bash:
  data: